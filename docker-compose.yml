version: "3.8"

services:
  db:
    image: mysql/mysql-server:8.0
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - "mysqldata:/var/lib/mysql"
    networks:
      - teamg

  frontend:
    build:
      context: ./frontend # 프론트엔드 Dockerfile이 있는 디렉토리
    ports:
      - "5173"
    depends_on:
      - web
    networks:
      - teamg

  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - teamg

  celery:
    build:
      context: ./backend # Dockerfile이 있는 디렉토리를 지정
    command: celery -A backend worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env # 환경 변수 파일 추가
    depends_on:
      - rabbitmq
      - db # 데이터베이스에 접근할 수 있도록 설정
    networks:
      - teamg

  web:
    build:
      context: ./backend # Dockerfile이 있는 디렉토리를 지정
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 backend.wsgi:application"
    ports:
      - "8000:8000"
    restart: always
    env_file:
      - .env
    depends_on:
      - db
      - rabbitmq
      - celery
    networks:
      - teamg

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./static:/static
      - ./html:/usr/share/nginx/html:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web
    networks:
      - teamg

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - db
    networks:
      - teamg

  prometheus:
    image: prom/prometheus:v2.45.6
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - teamg

  grafana: #서비스 이름
    image: grafana/grafana:9.5.20 #이미지 이름:태그. 태그는 latest등등도 괜찮습니다.
    container_name: grafana #컨테이너 이름. 아무거나 괜찮습니다
    volumes:
      - ./grafana:/etc/grafana/provisioning #그라파나 설정(config) 볼륨. 대부분 불필요 합지만 놔두시는게 좋습니다.
      - ./grafana/data:/var/lib/grafana #그라파나 대시보드 데이터. 이걸 설정 해둬야지 가상 볼륨을 날리셔도 대시보드들이 남아있습니다.
    ports:
      - "3000:3000" #그라파나는 기본적으로 3000번 포트 입니다
    networks:
      - teamg #이 부분은 프로메테우스랑 같은 네트워크로 두면 됩니다.

volumes:
  mysqldata:

networks:
  teamg:
    driver: bridge
